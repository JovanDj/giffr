{"version":3,"sources":["Trending/Trending.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","gifs","loading","q","page","option","reducer","state","action","type","payload","Error","Trending","useReducer","dispatch","map","gif","console","log","Col","md","key","id","className","title","Image","src","images","original","webp","rounded","fluid","fetchTrending","a","fetch","result","json","trendingGifs","data","useEffect","length","onSubmit","e","preventDefault","fetchRandom","search","request","giphy","pageChanged","target","textContent","response","Container","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Form","inline","FormControl","onChange","value","name","placeholder","Group","controlId","Control","as","Row","Spinner","animation","role","Pagination","onClick","_gif","i","Item","active","App","path","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8VA8BMA,EAAsB,CAC1BC,KAAM,GACNC,SAAS,EACTC,EAAG,GACHC,KAAM,EACNC,OAAQ,UAWJC,EAAkC,SACtCC,EACAC,GAEA,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,eAAKF,EAAZ,CAAmBN,KAAK,YAAKO,EAAOE,WACtC,IAAK,eACH,OAAO,eAAKH,EAAZ,CAAmBH,KAAM,IAC3B,IAAK,WACH,OAAO,eAAKG,EAAZ,CAAmBH,KAAMI,EAAOE,UAClC,IAAK,aACH,OAAO,eAAKH,EAAZ,CAAmBF,OAAQG,EAAOE,UACpC,IAAK,aACH,OAAO,eAAKH,EAAZ,CAAmBJ,EAAGK,EAAOE,UAC/B,QACE,MAAM,IAAIC,QAIHC,EAA8B,WAAO,IAAD,EACrBC,qBAAWP,EAASN,GADC,mBACxCO,EADwC,KACjCO,EADiC,KAGzCb,EAAsBM,EAAMN,KAAKc,KAAI,SAACC,GAE1C,OADAC,QAAQC,IAAIX,EAAMN,MAEhB,kBAACkB,EAAA,EAAD,CAAKC,GAAI,EAAGC,IAAKL,EAAIM,IACnB,wBAAIC,UAAU,WAAWP,EAAIQ,OAE7B,kBAACC,EAAA,EAAD,CAAOC,IAAKV,EAAIW,OAAOC,SAASC,KAAMC,SAAO,EAACC,OAAK,QAKnDC,EAAa,uCAAG,8BAAAC,EAAA,sEAElBnB,EAAS,CAAEL,KAAM,iBAFC,SAIayB,MAC7B,4FALgB,cAIZC,EAJY,gBAQgBA,EAAOC,OARvB,OAQZC,EARY,OAUlBvB,EAAS,CACPL,KAAM,eACNC,QAAS2B,EAAaC,OAZN,wDAeZ,IAAI3B,MAAJ,MAfY,0DAAH,qDAmBnB4B,qBAAU,WACRtB,QAAQC,IAAIX,EAAMN,MAEbM,EAAMN,KAAKuC,QACdR,MAED,CAACzB,EAAMN,OAEV,IAAMwC,EAA2C,uCAAG,WAAOC,GAAP,SAAAT,EAAA,sDAClDS,EAAEC,iBAEmB,WAAjBpC,EAAMF,OACRuC,IAEAC,IANgD,2CAAH,sDAU3CA,EAAM,uCAAG,8BAAAZ,EAAA,+EAEWC,MAAM,mFAAD,OAC0D3B,EAAMJ,EADhE,cAFhB,cAEL2C,EAFK,gBAMgBA,EAAQV,OANxB,OAMLW,EANK,OAQX9B,QAAQC,IAAI,SAAU6B,GAEtBjC,EAAS,CAAEL,KAAM,eAAgBC,QAASqC,EAAMT,OAVrC,wDAYL,IAAI3B,MAAJ,MAZK,0DAAH,qDAgBNqC,EAAgD,uCAAG,WAAON,GAAP,qBAAAT,EAAA,6DACvDS,EAAEC,iBAEEvC,EAAe,GACb6C,EAA2BP,EAAEO,QAExBC,cACT9C,GAAQ6C,EAAOC,YAEfpC,EAAS,CAAEL,KAAM,WAAYC,QAASN,KATe,kBAapB8B,MAAM,qFAAD,OACiD3B,EAAMJ,EADvD,4BAC4EI,EAAMH,OAdnE,cAa/C+C,EAb+C,iBAiB1BA,EAASf,OAjBiB,QAiB/CW,EAjB+C,OAmBrD9B,QAAQC,IAAI,SAAU6B,GAEtBjC,EAAS,CAAEL,KAAM,eAAgBC,QAASqC,EAAMT,OArBK,wDAuB/C,IAAI3B,MAAJ,MAvB+C,0DAAH,sDA2BhDiC,EAAW,uCAAG,8BAAAX,EAAA,+EAEiBC,MAAM,qFAAD,OACiD3B,EAAMJ,IAH7E,cAEVgD,EAFU,gBAMsCA,EAASf,OAN/C,OAMVpB,EANU,OAQhBF,EAAS,CAAEL,KAAM,eAAgBC,QAAS,CAACM,EAAIsB,QAR/B,wDAUV,IAAI3B,MAAJ,MAVU,0DAAH,qDAkCjB,OACE,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,cACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBrC,GAAG,oBAClB,kBAACsC,EAAA,EAAD,CAAMrC,UAAU,UAAUsC,QAAM,EAACpB,SAAUA,GACzC,kBAACqB,EAAA,EAAD,CACEC,SA5B2C,SAACrB,GACtDA,EAAEC,iBAEF7B,EAAS,CAAEL,KAAM,aAAcC,QAASgC,EAAEO,OAAOe,SA0BvCC,KAAK,IACLxD,KAAK,OACLyD,YAA8B,WAAjB3D,EAAMF,OAAsB,MAAQ,QACjDkB,UAAU,YAEZ,kBAACqC,EAAA,EAAKO,MAAN,CAAYC,UAAU,iBACpB,kBAACR,EAAA,EAAKS,QAAN,CAAcN,SA7BiB,SAACrB,GAC1CA,EAAEC,iBACF,IAAMtC,EAAUqC,EAAEO,OAA6Be,MAE/ClD,EAAS,CAAEL,KAAM,aAAcC,QAASL,IACxCY,QAAQC,IAAIb,GAEG,WAAXA,GACFuC,KAqBgD0B,GAAG,UACzC,4BAAQN,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,eAOV,kBAACO,EAAA,EAAD,KACGhE,EAAML,SACL,kBAACsE,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMnD,UAAU,WAAhB,eAIHtB,GAGH,kBAACsE,EAAA,EAAD,CAAKhD,UAAU,0BACb,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACuD,EAAA,EAAD,CAAYC,QAAS5B,GAClBzC,EAAMN,KAAKc,KAAI,SAAC8D,EAAMC,GACrB,OACE,kBAACH,EAAA,EAAWI,KAAZ,CAAiBC,OAAQF,IAAMvE,EAAMH,KAAMiB,IAAKyD,GAC7CA,WCrONG,EAAyB,WACpC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,iBACE,kBAAC,aAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjF,QAAQiF,MAAMA,EAAMC,c","file":"static/js/main.63e8664f.chunk.js","sourcesContent":["import React, {\r\n  FunctionComponent,\r\n  Reducer,\r\n  useReducer,\r\n  useEffect,\r\n  FormEventHandler,\r\n  ChangeEventHandler,\r\n  MouseEventHandler,\r\n} from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Image,\r\n  Spinner,\r\n  Navbar,\r\n  Form,\r\n  FormControl,\r\n  Pagination,\r\n} from \"react-bootstrap\";\r\nimport { Giphy, Gif } from \"../interfaces/giphy.interface\";\r\n\r\ntype State = {\r\n  gifs: Giphy[\"data\"];\r\n  loading: boolean;\r\n  q: string;\r\n  page: number;\r\n  option: string;\r\n};\r\n\r\nconst initialState: State = {\r\n  gifs: [],\r\n  loading: false,\r\n  q: \"\",\r\n  page: 0,\r\n  option: \"search\",\r\n};\r\n\r\ntype Action =\r\n  | { type: \"GET_TRENDING\" }\r\n  | { type: \"SET_TRENDING\"; payload: Giphy[\"data\"] }\r\n  | { type: \"SET_SEARCH\"; payload: string }\r\n  | { type: \"SEND_SEARCH\" }\r\n  | { type: \"SET_PAGE\"; payload: number }\r\n  | { type: \"SET_OPTION\"; payload: string };\r\n\r\nconst reducer: Reducer<State, Action> = (\r\n  state: State,\r\n  action: Action\r\n): State => {\r\n  switch (action.type) {\r\n    case \"SET_TRENDING\":\r\n      return { ...state, gifs: [...action.payload] };\r\n    case \"GET_TRENDING\":\r\n      return { ...state, page: 0 };\r\n    case \"SET_PAGE\":\r\n      return { ...state, page: action.payload };\r\n    case \"SET_OPTION\":\r\n      return { ...state, option: action.payload };\r\n    case \"SET_SEARCH\":\r\n      return { ...state, q: action.payload };\r\n    default:\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nexport const Trending: FunctionComponent = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const gifs: JSX.Element[] = state.gifs.map((gif: Gif) => {\r\n    console.log(state.gifs);\r\n    return (\r\n      <Col md={4} key={gif.id}>\r\n        <h2 className=\"h6 my-3\">{gif.title}</h2>\r\n\r\n        <Image src={gif.images.original.webp} rounded fluid />\r\n      </Col>\r\n    );\r\n  });\r\n\r\n  const fetchTrending = async () => {\r\n    try {\r\n      dispatch({ type: \"GET_TRENDING\" });\r\n\r\n      const result: Response = await fetch(\r\n        \"https://api.giphy.com/v1/gifs/trending?api_key=bEwsrCAqA59ckIljoJCyWmIYohMwCdos&limit=10\"\r\n      );\r\n\r\n      const trendingGifs: Giphy = await result.json();\r\n\r\n      dispatch({\r\n        type: \"SET_TRENDING\",\r\n        payload: trendingGifs.data,\r\n      });\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(state.gifs);\r\n\r\n    if (!state.gifs.length) {\r\n      fetchTrending();\r\n    }\r\n  }, [state.gifs]);\r\n\r\n  const onSubmit: FormEventHandler<HTMLFormElement> = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (state.option === \"random\") {\r\n      fetchRandom();\r\n    } else {\r\n      search();\r\n    }\r\n  };\r\n\r\n  const search = async () => {\r\n    try {\r\n      const request = await fetch(\r\n        `https://api.giphy.com/v1/gifs/search?api_key=bEwsrCAqA59ckIljoJCyWmIYohMwCdos&q=${state.q}&limit=10`\r\n      );\r\n\r\n      const giphy: Giphy = await request.json();\r\n\r\n      console.log(\"Search\", giphy);\r\n\r\n      dispatch({ type: \"SET_TRENDING\", payload: giphy.data });\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  const pageChanged: MouseEventHandler<HTMLUListElement> = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let page: number = 0;\r\n    const target: HTMLUListElement = e.target as HTMLUListElement;\r\n\r\n    if (target.textContent) {\r\n      page = +target.textContent;\r\n\r\n      dispatch({ type: \"SET_PAGE\", payload: page });\r\n    }\r\n\r\n    try {\r\n      const response: Response = await fetch(\r\n        `https://api.giphy.com/v1/gifs/trending?api_key=bEwsrCAqA59ckIljoJCyWmIYohMwCdos&q=${state.q}&limit=10&offset=${state.page}`\r\n      );\r\n\r\n      const giphy: Giphy = await response.json();\r\n\r\n      console.log(\"Search\", giphy);\r\n\r\n      dispatch({ type: \"SET_TRENDING\", payload: giphy.data });\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  const fetchRandom = async () => {\r\n    try {\r\n      const response: Response = await fetch(\r\n        `https://api.giphy.com/v1/gifs/random?api_key=bEwsrCAqA59ckIljoJCyWmIYohMwCdos&tag=${state.q}`\r\n      );\r\n\r\n      const gif: { data: Gif; meta: Giphy[\"meta\"] } = await response.json();\r\n\r\n      dispatch({ type: \"SET_TRENDING\", payload: [gif.data] });\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  const onChange: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: \"SET_SEARCH\", payload: e.target.value });\r\n  };\r\n\r\n  const onSelectChange: ChangeEventHandler = (e) => {\r\n    e.preventDefault();\r\n    const option = (e.target as HTMLOptionElement).value;\r\n\r\n    dispatch({ type: \"SET_OPTION\", payload: option });\r\n    console.log(option);\r\n\r\n    if (option === \"random\") {\r\n      fetchRandom();\r\n    } else {\r\n      //   fetchSearch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand>Giffr</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Form className=\"ml-auto\" inline onSubmit={onSubmit}>\r\n            <FormControl\r\n              onChange={onChange}\r\n              name=\"q\"\r\n              type=\"text\"\r\n              placeholder={state.option === \"search\" ? \"Tag\" : \"Query\"}\r\n              className=\"mr-sm-2\"\r\n            />\r\n            <Form.Group controlId=\"formGridState\">\r\n              <Form.Control onChange={onSelectChange} as=\"select\">\r\n                <option value=\"search\">Search</option>\r\n                <option value=\"random\">Random</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Form>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <Row>\r\n        {state.loading && (\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        )}\r\n\r\n        {gifs}\r\n      </Row>\r\n\r\n      <Row className=\"justify-content-center\">\r\n        <Col md={6}>\r\n          <Pagination onClick={pageChanged}>\r\n            {state.gifs.map((_gif, i) => {\r\n              return (\r\n                <Pagination.Item active={i === state.page} key={i}>\r\n                  {i}\r\n                </Pagination.Item>\r\n              );\r\n            })}\r\n          </Pagination>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from \"react\";\nimport \"./App.scss\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Trending } from \"./Trending/Trending\";\n\nexport const App: FunctionComponent = () => {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <Trending />\n      </Route>\n\n      <Route path=\"/trending\">\n        <Trending />\n      </Route>\n    </Switch>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport { unregister } from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nrender(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}